<div id="cart-container">
    {{#if cart.products.length}}
        <ul>
            {{#each cart.products}}
            <li id="cart-item-{{this.product._id}}">
                <div class="cart-item-content">
                    <strong>{{this.product.title}}</strong> 
                    <span class="quantity">Cantidad: {{this.quantity}}</span>
                    <button onclick="removeFromCart('{{../cart._id}}', '{{this.product._id}}')">Eliminar</button>
                </div>
            </li>
            {{/each}}
        </ul>
        <button onclick="clearCart('{{cart._id}}')" class="vaciar-carrito">üóëÔ∏è Vaciar Carrito</button>
    {{else}}
        <p>El carrito est√° vac√≠o.</p>
    {{/if}}
</div>


<a href="/products">üîô Volver a Productos</a>

<script src="/socket.io/socket.io.js"></script>
<script>
const socket = io();

// üîÑ Escuchar eventos de actualizaci√≥n del carrito en tiempo real
socket.on("carritoActualizado", (cart) => {
    console.log("üõí Carrito actualizado en tiempo real:", cart);

    const cartContainer = document.getElementById("cart-container");
    if (cartContainer) {
        cartContainer.innerHTML = ""; // Limpiar carrito antes de actualizar

        if (cart.products.length === 0) {
            cartContainer.innerHTML = "<p>El carrito est√° vac√≠o.</p>";
        } else {
            const ul = document.createElement("ul");

            cart.products.forEach((item) => {
                const li = document.createElement("li");
                li.id = `cart-item-${item.product._id}`; // ID √∫nico para cada producto
                li.innerHTML = `
                    <strong>${item.product.title}</strong> - Cantidad: ${item.quantity}
                    <button onclick="removeFromCart('${cart._id}', '${item.product._id}')">Eliminar</button>
                `;
                ul.appendChild(li);
            });

            cartContainer.appendChild(ul);
            cartContainer.innerHTML += `
                <button onclick="clearCart('${cart._id}')" class="vaciar-carrito">üóëÔ∏è Vaciar Carrito</button>
            `;
        }
    }
});

// ‚úÖ Eliminar producto sin recargar la p√°gina
async function removeFromCart(cartId, productId) {
    try {
        const result = await Swal.fire({
            title: "¬øEliminar producto?",
            text: "¬øEst√°s seguro de que deseas eliminar este producto del carrito?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "S√≠, eliminar",
            cancelButtonText: "Cancelar"
        });

        if (result.isConfirmed) {
            const response = await fetch(`/carts/${cartId}/products/${productId}`, { method: "DELETE" });

            if (!response.ok) throw new Error("Error al eliminar producto");

            Swal.fire({
                title: "Eliminado",
                text: "El producto fue eliminado del carrito.",
                icon: "success",
                confirmButtonText: "OK"
            });

            // ‚úÖ Eliminar del DOM sin recargar
            document.getElementById(`cart-item-${productId}`)?.remove();
        }
    } catch (error) {
        console.error("‚ùå Error:", error);
        Swal.fire("Error", "No se pudo eliminar el producto.", "error");
    }
}

// ‚úÖ Vaciar carrito sin recargar la p√°gina
async function clearCart(cartId) {
    try {
        const result = await Swal.fire({
            title: "¬øVaciar carrito?",
            text: "¬øEst√°s seguro de que deseas eliminar todos los productos del carrito?",
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#3085d6",
            confirmButtonText: "S√≠, vaciar",
            cancelButtonText: "Cancelar"
        });

        if (result.isConfirmed) {
            const response = await fetch(`/carts/${cartId}`, { method: "DELETE" });

            if (!response.ok) throw new Error("Error al vaciar el carrito");

            Swal.fire({
                title: "Carrito vac√≠o",
                text: "Todos los productos fueron eliminados del carrito.",
                icon: "success",
                confirmButtonText: "OK"
            });

            // ‚úÖ Vaciar la vista del carrito sin recargar la p√°gina
            document.getElementById("cart-container").innerHTML = "<p>El carrito est√° vac√≠o.</p>";
        }
    } catch (error) {
        console.error("‚ùå Error:", error);
        Swal.fire("Error", "No se pudo vaciar el carrito.", "error");
    }
}
</script>